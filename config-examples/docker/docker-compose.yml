# Secure Smart Home Infrastructure - Docker Compose Configuration
# This compose file sets up the complete smart home stack with security focus

version: '3.8'

services:
  # Home Assistant - Core smart home platform
  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:stable
    restart: unless-stopped
    privileged: true
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    ports:
      - "8123:8123"
    networks:
      - smart-home
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0  # Zigbee coordinator
      - /dev/ttyUSB1:/dev/ttyUSB1  # Z-Wave controller
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - influxdb
      - mosquitto

  # Zigbee2MQTT - Zigbee device management
  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    ports:
      - "8080:8080"
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    networks:
      - smart-home
    depends_on:
      - mosquitto

  # MQTT Broker - Message queuing for IoT devices
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/mosquitto:/mosquitto/config
      - ./data/mosquitto:/mosquitto/data
      - ./logs/mosquitto:/mosquitto/log
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - smart-home
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB - Time series database for sensor data
  influxdb:
    container_name: influxdb
    image: influxdb:2.7
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-smarthome}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-sensors}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./config/influxdb:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - smart-home
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Data visualization and monitoring
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - smart-home
    depends_on:
      - influxdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node-RED - Flow-based automation
  nodered:
    container_name: nodered
    image: nodered/node-red:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/nodered:/data
    ports:
      - "1880:1880"
    networks:
      - smart-home
    depends_on:
      - homeassistant
      - mosquitto
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1880"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ESPHome - ESP device management
  esphome:
    container_name: esphome
    image: ghcr.io/esphome/esphome:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/esphome:/config
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "6052:6052"
    networks:
      - smart-home
    privileged: true

  # AdGuard Home - DNS filtering and ad blocking
  adguard:
    container_name: adguard
    image: adguard/adguardhome:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/adguard/work:/opt/adguardhome/work
      - ./config/adguard/conf:/opt/adguardhome/conf
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "3001:3000/tcp"
      - "853:853/tcp"
      - "784:784/udp"
      - "8853:8853/udp"
      - "5443:5443/tcp"
      - "5443:5443/udp"
    networks:
      - smart-home
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frigate - NVR with AI object detection
  frigate:
    container_name: frigate
    image: ghcr.io/blakeblackshear/frigate:stable
    restart: unless-stopped
    privileged: true
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/frigate:/config
      - ./media/frigate:/media/frigate
      - type: tmpfs
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    ports:
      - "5000:5000"
      - "8554:8554"  # RTSP feeds
      - "8555:8555/tcp"  # WebRTC over tcp
      - "8555:8555/udp"  # WebRTC over udp
    networks:
      - smart-home
    devices:
      - /dev/bus/usb:/dev/bus/usb  # Coral USB accelerator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Unifi Controller - Network management
  unifi-controller:
    container_name: unifi-controller
    image: lscr.io/linuxserver/unifi-controller:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
      - MEM_LIMIT=1024  # Memory limit in MB
      - MEM_STARTUP=1024
    volumes:
      - ./config/unifi:/config
    ports:
      - "3478:3478/udp"  # STUN
      - "10001:10001/udp"  # AP discovery
      - "8080:8080"  # Device communication
      - "8443:8443"  # Web admin UI
      - "1900:1900/udp"  # L2 discovery
      - "8843:8843"  # Guest portal HTTPS
      - "8880:8880"  # Guest portal HTTP
      - "6789:6789"  # Speed test
      - "5514:5514/udp"  # Remote syslog
    networks:
      - smart-home

  # Prometheus - Metrics collection
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - smart-home
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - System metrics
  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - smart-home

  # Alertmanager - Alert handling
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./config/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - smart-home

  # Portainer - Container management
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    networks:
      - smart-home

  # Watchtower - Automatic container updates
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # 4 AM daily
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${NOTIFICATION_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${ADMIN_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT:-587}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - smart-home

  # Nginx Proxy Manager - Reverse proxy with SSL
  nginx-proxy-manager:
    container_name: nginx-proxy-manager
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - ./config/nginx-proxy-manager:/data
      - ./ssl:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    networks:
      - smart-home
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:81"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Fail2Ban - Intrusion prevention
  fail2ban:
    container_name: fail2ban
    image: crazymax/fail2ban:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ:-UTC}
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=30d
    volumes:
      - ./config/fail2ban:/data
      - ./logs:/var/log:ro
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW

volumes:
  influxdb_data:
  grafana_data:
  prometheus_data:
  alertmanager_data:
  portainer_data:

networks:
  smart-home:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16