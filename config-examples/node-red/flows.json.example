[
    {
        "id": "security_flow_tab",
        "type": "tab",
        "label": "Security Monitoring",
        "disabled": false,
        "info": "Security monitoring and automation flows for smart home"
    },
    {
        "id": "device_monitor_tab",
        "type": "tab",
        "label": "Device Monitoring",
        "disabled": false,
        "info": "IoT device monitoring and health checks"
    },
    {
        "id": "network_monitor_tab",
        "type": "tab",
        "label": "Network Monitoring",
        "disabled": false,
        "info": "Network traffic and security monitoring"
    },
    {
        "id": "motion_sensor_1",
        "type": "mqtt in",
        "z": "security_flow_tab",
        "name": "Motion Sensor",
        "topic": "zigbee2mqtt/motion_sensor_living_room",
        "qos": "2",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 80,
        "wires": [["motion_processor"]]
    },
    {
        "id": "motion_processor",
        "type": "function",
        "z": "security_flow_tab",
        "name": "Process Motion",
        "func": "if (msg.payload.occupancy === true) {\n    msg.payload = {\n        timestamp: new Date().toISOString(),\n        sensor: 'living_room_motion',\n        event: 'motion_detected',\n        location: 'living_room'\n    };\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "x": 320,
        "y": 80,
        "wires": [["security_alert", "log_motion"]]
    },
    {
        "id": "security_alert",
        "type": "function",
        "z": "security_flow_tab",
        "name": "Security Alert",
        "func": "// Check if home is in away mode\nvar homeMode = global.get('home_mode') || 'home';\n\nif (homeMode === 'away') {\n    msg.payload = {\n        alert_type: 'security_breach',\n        severity: 'high',\n        message: 'Motion detected while away: ' + msg.payload.location,\n        timestamp: msg.payload.timestamp\n    };\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "x": 520,
        "y": 80,
        "wires": [["send_notification", "trigger_camera"]]
    },
    {
        "id": "door_sensor_1",
        "type": "mqtt in",
        "z": "security_flow_tab",
        "name": "Door Sensor",
        "topic": "zigbee2mqtt/door_sensor_front",
        "qos": "2",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 160,
        "wires": [["door_processor"]]
    },
    {
        "id": "door_processor",
        "type": "function",
        "z": "security_flow_tab",
        "name": "Process Door",
        "func": "if (msg.payload.contact === false) {\n    msg.payload = {\n        timestamp: new Date().toISOString(),\n        sensor: 'front_door',\n        event: 'door_opened',\n        location: 'front_entrance'\n    };\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "x": 320,
        "y": 160,
        "wires": [["door_alert", "log_door"]]
    },
    {
        "id": "door_alert",
        "type": "function",
        "z": "security_flow_tab",
        "name": "Door Alert",
        "func": "var homeMode = global.get('home_mode') || 'home';\nvar currentTime = new Date().getHours();\n\nif (homeMode === 'away' || (homeMode === 'night' && (currentTime < 6 || currentTime > 22))) {\n    msg.payload = {\n        alert_type: 'door_breach',\n        severity: 'critical',\n        message: 'Door opened unexpectedly: ' + msg.payload.location,\n        timestamp: msg.payload.timestamp\n    };\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "x": 520,
        "y": 160,
        "wires": [["send_notification", "trigger_alarm"]]
    },
    {
        "id": "device_health_monitor",
        "type": "inject",
        "z": "device_monitor_tab",
        "name": "Health Check Timer",
        "props": [{"p": "payload"}],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [["check_devices"]]
    },
    {
        "id": "check_devices",
        "type": "function",
        "z": "device_monitor_tab",
        "name": "Check Device Status",
        "func": "var devices = [\n    'zigbee2mqtt/motion_sensor_living_room',\n    'zigbee2mqtt/door_sensor_front',\n    'zigbee2mqtt/smart_lock',\n    'zigbee2mqtt/smoke_detector'\n];\n\nvar messages = [];\n\ndevices.forEach(function(device) {\n    var lastSeen = global.get(device + '_last_seen');\n    var now = new Date().getTime();\n    var threshold = 10 * 60 * 1000; // 10 minutes\n    \n    if (!lastSeen || (now - lastSeen) > threshold) {\n        messages.push({\n            payload: {\n                device: device,\n                status: 'offline',\n                last_seen: lastSeen,\n                alert_type: 'device_offline'\n            }\n        });\n    }\n});\n\nreturn [messages];",
        "outputs": 1,
        "x": 360,
        "y": 80,
        "wires": [["device_offline_alert"]]
    },
    {
        "id": "device_offline_alert",
        "type": "function",
        "z": "device_monitor_tab",
        "name": "Device Offline Alert",
        "func": "if (msg.payload.status === 'offline') {\n    msg.payload = {\n        alert_type: 'device_offline',\n        severity: 'warning',\n        message: 'Device offline: ' + msg.payload.device,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "x": 580,
        "y": 80,
        "wires": [["send_notification"]]
    },
    {
        "id": "battery_monitor",
        "type": "mqtt in",
        "z": "device_monitor_tab",
        "name": "Battery Levels",
        "topic": "zigbee2mqtt/+",
        "qos": "2",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 160,
        "wires": [["battery_processor"]]
    },
    {
        "id": "battery_processor",
        "type": "function",
        "z": "device_monitor_tab",
        "name": "Process Battery",
        "func": "if (msg.payload.battery && msg.payload.battery < 20) {\n    msg.payload = {\n        device: msg.topic,\n        battery_level: msg.payload.battery,\n        alert_type: 'low_battery',\n        severity: 'warning',\n        message: 'Low battery: ' + msg.topic + ' (' + msg.payload.battery + '%)',\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "x": 340,
        "y": 160,
        "wires": [["send_notification"]]
    },
    {
        "id": "network_scanner",
        "type": "inject",
        "z": "network_monitor_tab",
        "name": "Network Scan Timer",
        "props": [{"p": "payload"}],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [["scan_network"]]
    },
    {
        "id": "scan_network",
        "type": "exec",
        "z": "network_monitor_tab",
        "command": "nmap -sn 192.168.30.0/24",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Scan IoT Network",
        "x": 360,
        "y": 80,
        "wires": [["process_scan_results"], [], []]
    },
    {
        "id": "process_scan_results",
        "type": "function",
        "z": "network_monitor_tab",
        "name": "Process Scan Results",
        "func": "var output = msg.payload;\nvar devices = [];\nvar lines = output.split('\\n');\n\nlines.forEach(function(line) {\n    if (line.includes('Nmap scan report for')) {\n        var ip = line.match(/\\d+\\.\\d+\\.\\d+\\.\\d+/);\n        if (ip) {\n            devices.push(ip[0]);\n        }\n    }\n});\n\nvar knownDevices = global.get('known_iot_devices') || [];\nvar newDevices = devices.filter(function(device) {\n    return !knownDevices.includes(device);\n});\n\nif (newDevices.length > 0) {\n    msg.payload = {\n        alert_type: 'new_device',\n        severity: 'warning',\n        message: 'New device(s) detected: ' + newDevices.join(', '),\n        devices: newDevices,\n        timestamp: new Date().toISOString()\n    };\n    \n    // Update known devices\n    global.set('known_iot_devices', devices);\n    \n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "x": 580,
        "y": 80,
        "wires": [["send_notification", "quarantine_device"]]
    },
    {
        "id": "firewall_monitor",
        "type": "file in",
        "z": "network_monitor_tab",
        "name": "Firewall Logs",
        "filename": "/var/log/pfsense/filterlog",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 120,
        "y": 160,
        "wires": [["process_firewall_logs"]]
    },
    {
        "id": "process_firewall_logs",
        "type": "function",
        "z": "network_monitor_tab",
        "name": "Process Firewall Logs",
        "func": "var logs = msg.payload.split('\\n');\nvar blockedAttempts = 0;\nvar suspiciousIPs = {};\n\nlogs.forEach(function(log) {\n    if (log.includes('block')) {\n        blockedAttempts++;\n        var parts = log.split(',');\n        if (parts.length > 8) {\n            var srcIP = parts[8];\n            suspiciousIPs[srcIP] = (suspiciousIPs[srcIP] || 0) + 1;\n        }\n    }\n});\n\nif (blockedAttempts > 50) {\n    var topIPs = Object.keys(suspiciousIPs)\n        .sort(function(a, b) { return suspiciousIPs[b] - suspiciousIPs[a]; })\n        .slice(0, 5);\n    \n    msg.payload = {\n        alert_type: 'high_firewall_activity',\n        severity: 'warning',\n        message: 'High firewall activity: ' + blockedAttempts + ' blocked attempts',\n        blocked_attempts: blockedAttempts,\n        top_ips: topIPs,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "x": 360,
        "y": 160,
        "wires": [["send_notification"]]
    },
    {
        "id": "send_notification",
        "type": "function",
        "z": "security_flow_tab",
        "name": "Send Notification",
        "func": "var notification = {\n    title: 'Smart Home Security Alert',\n    message: msg.payload.message,\n    severity: msg.payload.severity,\n    timestamp: msg.payload.timestamp\n};\n\n// Send to Home Assistant\nmsg.url = 'http://192.168.10.100:8123/api/services/notify/notify';\nmsg.method = 'POST';\nmsg.headers = {\n    'Authorization': 'Bearer ' + global.get('ha_token'),\n    'Content-Type': 'application/json'\n};\nmsg.payload = notification;\n\nreturn msg;",
        "outputs": 1,
        "x": 760,
        "y": 120,
        "wires": [["http_request"]]
    },
    {
        "id": "trigger_camera",
        "type": "function",
        "z": "security_flow_tab",
        "name": "Trigger Camera",
        "func": "msg.url = 'http://192.168.40.10/api/snapshot';\nmsg.method = 'POST';\nmsg.headers = {\n    'Authorization': 'Basic ' + Buffer.from('admin:password').toString('base64')\n};\n\nreturn msg;",
        "outputs": 1,
        "x": 760,
        "y": 80,
        "wires": [["http_request"]]
    },
    {
        "id": "trigger_alarm",
        "type": "function",
        "z": "security_flow_tab",
        "name": "Trigger Alarm",
        "func": "msg.url = 'http://192.168.10.100:8123/api/services/alarm_control_panel/alarm_trigger';\nmsg.method = 'POST';\nmsg.headers = {\n    'Authorization': 'Bearer ' + global.get('ha_token'),\n    'Content-Type': 'application/json'\n};\nmsg.payload = {\n    entity_id: 'alarm_control_panel.home_security'\n};\n\nreturn msg;",
        "outputs": 1,
        "x": 760,
        "y": 160,
        "wires": [["http_request"]]
    },
    {
        "id": "quarantine_device",
        "type": "function",
        "z": "network_monitor_tab",
        "name": "Quarantine Device",
        "func": "if (msg.payload.devices && msg.payload.devices.length > 0) {\n    msg.payload.devices.forEach(function(device) {\n        // Call quarantine script\n        var quarantineMsg = {\n            payload: {\n                command: '/scripts/incident-response/isolate-device.sh ' + device,\n                reason: 'Unknown device detected'\n            }\n        };\n        \n        node.send(quarantineMsg);\n    });\n}\n\nreturn null;",
        "outputs": 1,
        "x": 780,
        "y": 120,
        "wires": [["exec_quarantine"]]
    },
    {
        "id": "log_motion",
        "type": "file",
        "z": "security_flow_tab",
        "name": "Log Motion Events",
        "filename": "/var/log/smart-home/motion-events.log",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 520,
        "y": 40,
        "wires": [[]]
    },
    {
        "id": "log_door",
        "type": "file",
        "z": "security_flow_tab",
        "name": "Log Door Events",
        "filename": "/var/log/smart-home/door-events.log",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 520,
        "y": 200,
        "wires": [[]]
    },
    {
        "id": "http_request",
        "type": "http request",
        "z": "security_flow_tab",
        "name": "HTTP Request",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 960,
        "y": 120,
        "wires": [[]]
    },
    {
        "id": "exec_quarantine",
        "type": "exec",
        "z": "network_monitor_tab",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Execute Quarantine",
        "x": 980,
        "y": 120,
        "wires": [[], [], []]
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Home MQTT Broker",
        "broker": "192.168.10.100",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]